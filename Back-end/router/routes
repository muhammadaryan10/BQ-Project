const express = require('express');
const mongoose = require('mongoose');
const User=require("../models/usermodel");
const Products=require("../models/Productmodel")
const CartProducts=require("../models/Cartmodel");
const bcrypt = require('bcrypt');
const saltRounds = 12;
const jwt = require('jsonwebtoken');

const router=express.Router();

router.get('/',async(req,res)=>{
    try {
        const Feature = await Products.find({ featured: "true" });
        if (!Feature) {
          return res.status(404).json({ message: 'Use not found' });
        }
        return res.json( Feature ); 
        // console.log(Feature) // Successfully deleted, no content
      } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'An error occurred' });
      }
})

router.post('/Login', async (req, res) => {
    const { email, password } = req.body;
    const SecretKey = 'MYNAMEISARYANIAMAMERNWEBDEVELOPER'; // Enclose the secret key in quotes
    try {
        if (!email || !password) {
            return res.status(400).json({ error: "Please fill in all the data" });
        }

        const user = await User.findOne({ email: email });

        if (!user) {
            return res.status(404).json({ message: 'Invalid credentials' });
        }

        // Compare hashed password
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        const token = jwt.sign({ userId: user._id }, SecretKey, { expiresIn: '1h' });

        // Save the token to the user document
        user.token = token;
        await user.save();
        console.log(token)
        res.cookie('token', token, { expires: new Date(Date.now() + 3600000) });
        res.status(200).json(user);
    } catch (error) {
        console.log("Error:", error);
        res.status(500).json({ error: "An error occurred" });
    }
});

router.post('/Signup',async(req,res)=>{

    const {name,email,Phone,password}=req.body;

    try {
      const hashedPassword = await bcrypt.hash(password, saltRounds);
        const userData=await User.create({
            name : name,
            email:email,
            Phone: Phone,
            password: hashedPassword,
        })
        res.status(201).json(userData)
    } catch (error) {
        res.status(401);
    }
   

})
router.post('/AddProduct',async(req,res)=>{

    const { title, des, imgurl, price,deleteprice,cat } =req.body;

    try {
        const ProductData=await Products.create({
            title: title,
            des: des,
            imgurl: imgurl,
            price: price,
            cat:cat,
            deleteprice:deleteprice
        })
        res.status(201).json(ProductData)
    } catch (error) {
        res.status(401);
    }
   

})
router.post('/CartProduct', async (req, res) => {
  const { title, imgurl, price, cat } = req.body;

  try {
    const cartProduct = await CartProducts.create({
      title: title,
      imgurl: imgurl,
      price: price,
      cat: cat,
    });
    
    res.status(201).json(cartProduct);
  } catch (error) {
    res.status(500).json({ error: "An error occurred while adding the product to the cart." });
  }
});
router.get('/CartPage', async (req, res) => {
  try {
    const showAll = await CartProducts.find();
    res.status(200).json(showAll); // 200 OK status for a successful response
  } catch (error) {
    res.status(500).json({ error: "An error occurred while retrieving cart items." });
  }
});
router.get('/Usermanage',async(req,res)=>{
    try {
        const showAll= await User.find()
        res.status(201).json(showAll)
    } catch (error) {
        res.status(401);
    }
})
router.get('/Productmanage',async(req,res)=>{
    try {
        const showAll= await Products.find()
        res.status(201).json(showAll)
    } catch (error) {
        res.status(401);
    }
})
router.get('/ProductDetail/:id', async (req, res) => {
    const userId = req.params.id;
    console.log("userId =======");  
    try {
      const SingleUser = await Products.findById( userId );
      if (!SingleUser) {
        return res.status(404).json({ message: 'Use not found' });
      }
      return res.json({ SingleUser });  // Successfully deleted, no content
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'An error occurred' });
    }
  });
  // to be edited
router.delete('/:id', async (req, res) => {
    const userId = req.params.id;
  
    try {
      const deletedUser = await User.findByIdAndDelete(userId);
  
      if (!deletedUser) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      return res.status(204).json(); // Successfully deleted, no content
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'An error occurred' });
    }
  });
  router.delete('/Products/:id', async (req, res) => {
    const userId = req.params.id;
    console.log("userId ======="); 
    try {
      const deletedProduct = await Products.findByIdAndDelete(userId);
  
      if (!deletedProduct) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      return res.status(204).json(); // Successfully deleted, no content
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'An error occurred' });
    }
  });
''
router.get('/Contact',(req,res)=>{
    res.send("Hello Contact World")
})
router.delete('/RemoveCartProduct/:id',async(req,res)=>{
  const userId = req.params.id;
  console.log("productId ======="); 
  try {
    const deletedProduct = await CartProducts.findByIdAndDelete(userId);
    if (!deletedProduct) {
      return res.status(404).json({ message: 'Product has already Deleted ' });
    }
    return res.status(204).json(); // Successfully deleted, no content
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'An error occurred' });
  }
})


module.exports=router;